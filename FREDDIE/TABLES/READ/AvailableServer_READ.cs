///////READ CLASS CREATED ON 09/25/2019 8:25:37 AM

public class AvailableServer_READ : dbUTL
{
	private const System.String DEFAULT_OBJECT_NAME ="AVAILABLE_SERVER";
	private const System.String DEFAULT_DATABASE_NAME ="FREDDIE";
	public event EVENT_HANDLER INFORMATION_EVENT_VERBOSE_LOCAL;
	public event EVENT_HANDLER INFORMATION_EVENT_LOCAL;
	public event EVENT_HANDLER WARNING_EVENT_LOCAL;
	public event EVENT_HANDLER ERROR_EVENT_LOCAL;
	private void LOG_INFORMATION_EVENT_VERBOSE_LOCAL(string MSG)
	{
		if (INFORMATION_EVENT_VERBOSE_LOCAL != null)
		{
			INFORMATION_EVENT_VERBOSE_LOCAL(this, new EVENT_HANDLER_SUPER(MSG));
		}
	}
	private void LOG_INFORMATION_EVENT_LOCAL(string MSG)
	{
		if (INFORMATION_EVENT_LOCAL != null)
		{
			INFORMATION_EVENT_LOCAL(this, new EVENT_HANDLER_SUPER(MSG));
		}
	}
	private void LOG_WARNING_EVENT_LOCAL(string MSG)
	{
		if (WARNING_EVENT_LOCAL != null)
		{
			WARNING_EVENT_LOCAL(this, new EVENT_HANDLER_SUPER(MSG));
		}
	}
	private void LOG_ERROR_EVENT_LOCAL(string MSG)
	{
		if (ERROR_EVENT_LOCAL != null)
		{
			ERROR_EVENT_LOCAL(this, new EVENT_HANDLER_SUPER(MSG));
		}
	}
	public System.Data.DataSet SEL_ALL_ROWS()
	{
		try
		{
		cmd = new System.Data.SqlClient.SqlCommand();
		cmd.CommandType = System.Data.CommandType.StoredProcedure;
		cmd.CommandText = "usp_SEL_ALL_AVAILABLE_SERVER";
			return GET_SP_DATASET(DEFAULT_DATABASE_NAME, cmd   );
		}
		catch (System.Data.SqlClient.SqlException SqlException)
		{
			LOG_ERROR_EVENT_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|" + SqlException.Message);
			return null;
		}
		finally
		{
			cmd = null;
			 LOG_INFORMATION_EVENT_VERBOSE_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|finally");
		}
	} /// end of SEL_ALL_ROWS


    public System.Data.DataSet SEL_BY_INSOPID( )
    {
        try
        {
            cmd = new System.Data.SqlClient.SqlCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "usp_SEL_AVAILABLE_SERVER_BY_INSOPID";


            /////COLUMNS TO SELECT BY////

            ///// cmd.Parameters.AddWithValue("@INSOPID",o.INSOPID); RESERVED COLUMN NAME AUTO GENERATED BY SQL SERVER
            return GET_SP_DATASET(DEFAULT_DATABASE_NAME, cmd);
        }
        catch (System.Data.SqlClient.SqlException SqlException)
        {
            LOG_ERROR_EVENT_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|" + SqlException.Message);
            return null;
        }
        finally
        {
            cmd = null;
            LOG_INFORMATION_EVENT_VERBOSE_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|finally");
        }
    } /// end of CUSTOM SELECT





    public System.Data.DataSet SEL_BY_PK(AvailableServerModel o)
	{
		try
		{
			cmd = new System.Data.SqlClient.SqlCommand();
			cmd.CommandType = System.Data.CommandType.StoredProcedure;
			cmd.Parameters.AddWithValue("@SERVER_NAME",o.SERVER_NAME);

		cmd.CommandText = "usp_SEL_BY_PK_AVAILABLE_SERVER";
			return GET_SP_DATASET(DEFAULT_DATABASE_NAME, cmd   );
		}
		catch (System.Data.SqlClient.SqlException SqlException)
		{
			LOG_ERROR_EVENT_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|" + SqlException.Message);
			return null;
		}
		finally
		{
			 cmd = null;
			 LOG_INFORMATION_EVENT_VERBOSE_LOCAL(this.GetType().Name + "|" + System.Reflection.MethodBase.GetCurrentMethod().Name + "|finally");
		}
	} 
}   /////END OF CLASS


